sreadahead - a readahead implementation optimized for solid state devices

---

How it works

Sreadahead is a simple daemon that takes a list of blocks to read as
input and fetches that data from storage into page cache. If the list
of blocks is properly implemented then sreadahead drastically reduces
the time that the CPU is waiting on the IO to finish and can spend
most of it's time on CPU-intensive tasks instead, thereby reducing
the total time needed to perform those tasks.

The main idea is that in order to boot linux, we need to retreive large
amounts of data from disk and perform computational tasks on them.
If we would fetch a little bit of data, compute on that for a bit,
fetch some new data, compute on that a bit, we are wasting free IO
bandwidth that could have been used to fetch data in the background.

The classical readahead implementation solves this inefficiency by
making a list of files that are read at boot, and reading all the
contents of those files in the disk order into memory as soon as the
computer boots.

This approach however has two flaws: It reads the entire file into
memory, which may be much more than is actually needed. It also could
potentially spend a lot of time reading a really large file that is
used last at the start of it's run, thereby stalling the CPU which
is waiting for data that could be at the end of the list.

Sreadahead fixes the 'order' issue by adding a timestamp to each inode
with a kernel patch. This timestamp marks the time that the inode
was created which marks the 'first use' time. We then can walk all
the existing inodes in a filesystem and order all the files by this
timestamp, thus extracting a list perfectly ordered by 'use' order.

This is done in the sreadahead-pack utility. This utility then checks
for each of the files in the list which parts of that file are actually
read into memory, and omits non-read parts from the list of blocks
to be read.

At the next boot, the sreadahead program parses the content of this list
and reads all of the blocks in the order provided into the page cache.

Inherently sreadahead-pack must be run on the target system after a
clean boot to generate the file list, called '/etc/readahead.packed'. Of
course sreadahead can not have been started since it will predetermine
the file order before the actual boot begins, so the system must at
least be started once without acceleration in order to generate a
clean packed file.


---

How distributions should implement sreadahead.

Distributions packaging sreadahead should implement two components:
1) starting sreadahead as early as possible
2) at the end of the boot sequence, generate a pack file if needed

Typically, the following line would be added to the top of
/etc/rc.sysvinit (or equivalent):

	/sbin/sreadahead

This will make sreadahead fork into the background and load an existing
readahead.packed file, and then doing it's work.

If the /etc/readahead.packed file is deleted, the init.d scripts would
typically re-generate this file at the end of a clean boot by adding an
/etc/rc5.d/S99sreadahead-pack script that typically does something like:

	if [ -f /etc/readahead.packed ]; then
		exit 0
	fi
	cd /tmp
	find / -type f \( -fstype ext3 -o -fstype rootfs \) > \
		readahead.packed.new
	generate_filelist readahead.packed.new
	mv readahead.packed.new /etc/readahead.packed

To update the pack file, one can simply remove /etc/readahead.packed and
reboot the system.

